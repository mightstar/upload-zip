{
  "root": true,
  "ignorePatterns": ["webpack.*.mjs"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "tsconfigRootDir": ".",
    "project": ["./tsconfig.json"],
    "ecmaVersion": 2023,
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "plugins": ["react", "react-native", "prefer-arrow", "import"],
  "extends": [
    "eslint:recommended",
    "plugin:import/typescript",
    "plugin:eslint-comments/recommended",
    "plugin:json/recommended-with-comments",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "airbnb",
    "airbnb/hooks",
    "airbnb-typescript",
    "plugin:prettier/recommended",
    "plugin:@cspell/recommended"
  ],
  "rules": {
    // General
    "prefer-arrow-callback": "error", // we prefer to use arrow functions as callbacks
    "no-void": ["error", { "allowAsStatement": true }], // we allow to use "void" to mark promises we don't wait for
    "no-unused-expressions": ["error"], // we prefer to use callFunction?.() instead of callFunction && callFunction()
    "eslint-comments/require-description": ["error", { "ignore": ["eslint-enable"] }], // we don't need to comment why we used "eslint-enable"
    "no-underscore-dangle": ["off"], // we regulate an use of an underscore by other rules
    "no-plusplus": "off", // It's okay to use ++ operator
    "quote-props": ["error", "consistent-as-needed"],
    "quotes": ["error", "single", { "avoidEscape": true }],
    "arrow-parens": ["error", "always"],
    "curly": ["error", "all"],

    // React
    "react/function-component-definition": [
      "error",
      { "namedComponents": "arrow-function", "unnamedComponents": "arrow-function" }
    ], // we must use arrow functions for React components
    "react/react-in-jsx-scope": "off", // we don't need import React in all jsx files
    "react/require-default-props": "off", // we don't use PropTypes
    "react/jsx-props-no-spreading": "off", // we spread props everywhere
    "react-hooks/exhaustive-deps": "warn", // we allow passing not all hook dependencies, but want to draw attention

    // Imports
    "no-duplicate-imports": "error", // imports from the same source must be in one record
    "import/no-cycle": "error", // we must avoid cycle imports
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }], // we use only devDependencies
    "import/prefer-default-export": "off", // we use only named exports in the project

    // TypeScript
    "@typescript-eslint/no-shadow": "error", // Vars with the same name in different scopes are not allowed
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }], // Names of unused vars can start only from an underscore
    "@typescript-eslint/no-unused-expressions": ["error"],
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "variables": false // we should disable this since we use all "styles" vars before their definition
      }
    ],
    "@typescript-eslint/no-inferrable-types": "off", // we should always set types, even if they are trivial (number, boolean, etc)

    // React Native
    "react-native/no-inline-styles": "error", // All react-native styles must be move out to a styles object
    "react-native/split-platform-components": "error",
    "react-native/no-single-element-style-arrays": "error",

    // Spell checker
    "@cspell/spellchecker": "error",

    // Formatting
    "padding-line-between-statements": [
      "error",
      { "blankLine": "always", "prev": "*", "next": ["return", "if", "throw"] },
      { "blankLine": "always", "prev": "if", "next": "*" },
      { "blankLine": "always", "prev": "const", "next": "*" },
      { "blankLine": "any", "prev": "const", "next": ["const", "let"] },
      {
        "blankLine": "always",
        "prev": "multiline-const",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "multiline-const"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "export"
      },
      {
        "blankLine": "always",
        "prev": "export",
        "next": "*"
      }
    ],

    // Naming convention
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["strictCamelCase"],
        "filter": {
          "match": false,
          "regex": "^((Poppins.*)|(\\d(xs|xl)?)|(_stack|_overlay|_presenceTransition|_icon|_text|_focus|_spinner|_dark|_hover|_pressed|_invalid|_entered|_web|_disabled|_checked|_light)|(.*Element)|(No .*)|(Example \\d))"
        }
      },
      {
        "selector": "variable",
        "modifiers": ["global"],
        "types": ["number", "string"],
        "format": ["UPPER_CASE"]
      },
      {
        "selector": "variable",
        "modifiers": ["destructured"],
        "format": ["strictCamelCase", "StrictPascalCase"],
        "filter": {
          "match": false,
          "regex": "^(secureTextEntry)"
        }
      },
      {
        "selector": "variable",
        "modifiers": ["exported"],
        "format": ["strictCamelCase", "StrictPascalCase", "UPPER_CASE"],
        "filter": {
          "match": false,
          "regex": "^(FCWithRef)"
        }
      },
      {
        "selector": "variable",
        "types": ["function"],
        "format": ["strictCamelCase", "StrictPascalCase"]
      },
      {
        "selector": "function",
        "format": ["strictCamelCase", "StrictPascalCase"]
      },
      {
        "selector": "property",
        "format": ["strictCamelCase", "StrictPascalCase"],
        "filter": {
          "match": false,
          "regex": "^((Poppins.*)|(\\d(xs|xl)?)|(_stack|_overlay|_presenceTransition|_icon|_text|_focus|_spinner|_dark|_hover|_pressed|_invalid|_entered|_web|_disabled|_checked|_light)|(.*Element)|(No .*)|(Example \\d))"
        }
      },
      { "selector": "enum", "format": ["StrictPascalCase"] },
      {
        "selector": "enumMember",
        "format": ["UPPER_CASE"],
        "filter": {
          "match": false,
          "regex": "^\\d(XL|XS)"
        }
      },
      {
        "selector": "parameter",
        "format": ["strictCamelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["StrictPascalCase"],
        "prefix": ["is", "has", "show", "with", "use", "no", "newIs", "initialIs"],
        "filter": {
          "match": false,
          "regex": "^visible|(newPlay|play)|buffering|muted|expanded"
        }
      },
      {
        "selector": "interface",
        "format": ["StrictPascalCase"]
      },
      {
        "selector": "typeLike",
        "format": ["StrictPascalCase"]
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "node": {
        "alias": {
          "map": [
            ["assets", "src/assets/index.ts"],
            ["assets/*", "src/assets/*"],
            ["hooks", "src/hooks/index.ts"],
            ["hooks/*", "src/hooks/*"],
            ["components", "src/components/index.ts"],
            ["atoms", "src/components/atoms/index.ts"],
            ["atoms/*", "src/components/atoms/*"],
            ["molecules", "src/components/molecules/index.ts"],
            ["molecules/*", "src/components/molecules/*"],
            ["types", "src/components/types.ts"],
            ["overlay", "src/components/overlay/index.ts"],
            ["content", "src/content/index.ts"],
            ["constants/*", "src/constants/*"],
            ["utils", "src/utils/index.ts"],
            ["theme", "src/theme/index.ts"],
            ["storybook/*", "storybook/*"],
            ["providers", "src/providers/index.ts"],
            ["helpers", "src/components/helpers/index.ts"]
          ],
          "extensions": [".ts", ".tsx", ".json"]
        }
      }
    }
  }
}
